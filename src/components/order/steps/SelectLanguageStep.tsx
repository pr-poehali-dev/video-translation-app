import React, { useState, useEffect } from "react";
import { Input } from "@/components/ui/input";
import Icon from "@/components/ui/icon";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface SelectLanguageStepProps {
  videoFile: File | null;
  selectedLanguage: string;
  setSelectedLanguage: (language: string) => void;
}

interface Language {
  code: string;
  name: string;
  flag: string;
  popular: boolean;
}

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ
const useVideoPreview = (videoFile: File | null) => {
  const [videoPreviewUrl, setVideoPreviewUrl] = useState<string | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (videoFile) {
      const url = URL.createObjectURL(videoFile);
      setVideoPreviewUrl(url);

      return () => {
        URL.revokeObjectURL(url);
      };
    }
  }, [videoFile]);

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    if (isPlaying) {
      const timer = setTimeout(() => {
        const videoElement = document.getElementById(
          "preview-video",
        ) as HTMLVideoElement;
        if (videoElement) {
          videoElement.pause();
          setIsPlaying(false);
        }
      }, 5000);

      return () => clearTimeout(timer);
    }
  }, [isPlaying]);

  const togglePlayback = () => {
    const videoElement = document.getElementById(
      "preview-video",
    ) as HTMLVideoElement;
    if (videoElement) {
      if (isPlaying) {
        videoElement.pause();
      } else {
        videoElement.currentTime = 0; // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞
        videoElement
          .play()
          .catch((e) => console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:", e));
      }
      setIsPlaying(!isPlaying);
    }
  };

  return { videoPreviewUrl, isPlaying, togglePlayback };
};

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–∞–º–∏
const useLanguages = (searchTerm: string) => {
  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
  const allLanguages: Language[] = [
    { code: "en", name: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", flag: "üá¨üáß", popular: true },
    { code: "es", name: "–ò—Å–ø–∞–Ω—Å–∫–∏–π", flag: "üá™üá∏", popular: true },
    { code: "fr", name: "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", flag: "üá´üá∑", popular: true },
    { code: "de", name: "–ù–µ–º–µ—Ü–∫–∏–π", flag: "üá©üá™", popular: true },
    { code: "it", name: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", flag: "üáÆüáπ", popular: true },
    { code: "pt", name: "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π", flag: "üáµüáπ", popular: true },
    { code: "ru", name: "–†—É—Å—Å–∫–∏–π", flag: "üá∑üá∫", popular: true },
    { code: "zh", name: "–ö–∏—Ç–∞–π—Å–∫–∏–π", flag: "üá®üá≥", popular: true },
    { code: "ja", name: "–Ø–ø–æ–Ω—Å–∫–∏–π", flag: "üáØüáµ", popular: true },
    { code: "ko", name: "–ö–æ—Ä–µ–π—Å–∫–∏–π", flag: "üá∞üá∑", popular: true },
    { code: "ar", name: "–ê—Ä–∞–±—Å–∫–∏–π", flag: "üá∏üá¶", popular: false },
    { code: "hi", name: "–•–∏–Ω–¥–∏", flag: "üáÆüá≥", popular: false },
    { code: "bn", name: "–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π", flag: "üáßüá©", popular: false },
    { code: "id", name: "–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π", flag: "üáÆüá©", popular: false },
    { code: "tr", name: "–¢—É—Ä–µ—Ü–∫–∏–π", flag: "üáπüá∑", popular: false },
    { code: "nl", name: "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π", flag: "üá≥üá±", popular: false },
    { code: "pl", name: "–ü–æ–ª—å—Å–∫–∏–π", flag: "üáµüá±", popular: false },
    { code: "sv", name: "–®–≤–µ–¥—Å–∫–∏–π", flag: "üá∏üá™", popular: false },
    { code: "da", name: "–î–∞—Ç—Å–∫–∏–π", flag: "üá©üá∞", popular: false },
  ];

  // –§–∏–ª—å—Ç—Ä—É–µ–º —è–∑—ã–∫–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredLanguages = allLanguages.filter((lang) =>
    lang.name.toLowerCase().includes(searchTerm.toLowerCase()),
  );

  // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
  const popularLanguages = filteredLanguages.filter((lang) => lang.popular);
  const otherLanguages = filteredLanguages.filter((lang) => !lang.popular);

  return {
    allLanguages,
    filteredLanguages,
    popularLanguages,
    otherLanguages,
  };
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
const LanguageSearchInput: React.FC<{
  searchTerm: string;
  setSearchTerm: (term: string) => void;
}> = ({ searchTerm, setSearchTerm }) => (
  <div className="relative mb-4">
    <Icon
      name="Search"
      className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground"
      size={16}
    />
    <Input
      placeholder="–ü–æ–∏—Å–∫ —è–∑—ã–∫–∞..."
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      className="pl-9"
    />
  </div>
);

const LanguageOption: React.FC<{
  language: Language;
  isSelected: boolean;
  onSelect: () => void;
}> = ({ language, isSelected, onSelect }) => (
  <button
    className={`
      flex items-center p-2 rounded-md hover:bg-muted text-left transition-colors
      ${isSelected ? "bg-primary/10 text-primary" : ""}
    `}
    onClick={onSelect}
  >
    <span className="mr-2 text-lg">{language.flag}</span>
    <span>{language.name}</span>
    {isSelected && (
      <Icon name="Check" className="ml-auto text-primary" size={16} />
    )}
  </button>
);

const LanguageList: React.FC<{
  popularLanguages: Language[];
  otherLanguages: Language[];
  filteredLanguages: Language[];
  searchTerm: string;
  selectedLanguage: string;
  setSelectedLanguage: (code: string) => void;
}> = ({
  popularLanguages,
  otherLanguages,
  filteredLanguages,
  searchTerm,
  selectedLanguage,
  setSelectedLanguage,
}) => (
  <ScrollArea className="h-[300px] border rounded-md">
    {popularLanguages.length > 0 && !searchTerm && (
      <div className="p-4 border-b">
        <h4 className="text-sm font-medium mb-3">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏</h4>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
          {popularLanguages.map((lang) => (
            <LanguageOption
              key={lang.code}
              language={lang}
              isSelected={selectedLanguage === lang.code}
              onSelect={() => setSelectedLanguage(lang.code)}
            />
          ))}
        </div>
      </div>
    )}

    <div className="p-4">
      {searchTerm ? (
        <h4 className="text-sm font-medium mb-3">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h4>
      ) : (
        <h4 className="text-sm font-medium mb-3">–í—Å–µ —è–∑—ã–∫–∏</h4>
      )}

      {filteredLanguages.length === 0 ? (
        <div className="text-center py-4 text-muted-foreground">
          –Ø–∑—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        </div>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
          {(searchTerm ? filteredLanguages : otherLanguages).map((lang) => (
            <LanguageOption
              key={lang.code}
              language={lang}
              isSelected={selectedLanguage === lang.code}
              onSelect={() => setSelectedLanguage(lang.code)}
            />
          ))}
        </div>
      )}
    </div>
  </ScrollArea>
);

const VideoPreview: React.FC<{
  videoPreviewUrl: string | null;
  isPlaying: boolean;
  togglePlayback: () => void;
  selectedLanguage: string;
  allLanguages: Language[];
}> = ({
  videoPreviewUrl,
  isPlaying,
  togglePlayback,
  selectedLanguage,
  allLanguages,
}) => (
  <div className="relative w-full aspect-video rounded-lg overflow-hidden border bg-gray-100">
    {videoPreviewUrl ? (
      <>
        <video
          id="preview-video"
          src={videoPreviewUrl}
          className="w-full h-full object-contain"
        />
        <button
          className="absolute inset-0 w-full h-full flex items-center justify-center bg-black/30 transition-opacity hover:bg-black/40"
          onClick={togglePlayback}
        >
          <div className="w-16 h-16 rounded-full bg-white/20 backdrop-blur-sm flex items-center justify-center">
            <Icon
              name={isPlaying ? "Pause" : "Play"}
              size={30}
              className="text-white ml-1"
            />
          </div>
        </button>
      </>
    ) : (
      <div className="flex items-center justify-center h-full text-muted-foreground">
        <span>–í–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</span>
      </div>
    )}

    {/* –ë–µ–π–¥–∂ —Å –¥–µ–º–∫–æ–π */}
    <Badge
      variant="secondary"
      className="absolute top-2 right-2 bg-black/70 text-white"
    >
      5-—Å–µ–∫. –¥–µ–º–æ
    </Badge>

    {selectedLanguage && (
      <div className="absolute bottom-2 left-2 flex items-center bg-black/70 text-white px-2 py-1 rounded-md text-sm">
        <span className="mr-1">–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:</span>
        {allLanguages.find((l) => l.code === selectedLanguage)?.flag}{" "}
        {allLanguages.find((l) => l.code === selectedLanguage)?.name}
      </div>
    )}
  </div>
);

const InfoMessage: React.FC = () => (
  <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg text-blue-800">
    <div className="flex items-start">
      <Icon name="Info" size={20} className="mr-2 mt-0.5 text-blue-600" />
      <div>
        <p className="font-medium">–î–æ—Å—Ç—É–ø–Ω–∞ 5-—Å–µ–∫—É–Ω–¥–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è</p>
        <p className="text-sm mt-1">
          –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å 5-—Å–µ–∫—É–Ω–¥–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
          –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –≤–∏–¥–µ–æ.
        </p>
      </div>
    </div>
  </div>
);

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const SelectLanguageStep: React.FC<SelectLanguageStepProps> = ({
  videoFile,
  selectedLanguage,
  setSelectedLanguage,
}) => {
  const [searchTerm, setSearchTerm] = useState("");

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫–∏
  const { videoPreviewUrl, isPlaying, togglePlayback } =
    useVideoPreview(videoFile);
  const { allLanguages, filteredLanguages, popularLanguages, otherLanguages } =
    useLanguages(searchTerm);

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ */}
      <div>
        <h3 className="text-xl font-medium mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞</h3>
        <p className="text-muted-foreground mb-4">
          –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞—à–µ –≤–∏–¥–µ–æ. –î–æ—Å—Ç—É–ø–Ω–æ 175
          —è–∑—ã–∫–æ–≤.
        </p>

        <LanguageSearchInput
          searchTerm={searchTerm}
          setSearchTerm={setSearchTerm}
        />

        <LanguageList
          popularLanguages={popularLanguages}
          otherLanguages={otherLanguages}
          filteredLanguages={filteredLanguages}
          searchTerm={searchTerm}
          selectedLanguage={selectedLanguage}
          setSelectedLanguage={setSelectedLanguage}
        />
      </div>

      {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ */}
      <div>
        <h3 className="text-xl font-medium mb-2">–ü—Ä–µ–≤—å—é</h3>
        <p className="text-muted-foreground mb-4">
          –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å 5-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –ø—Ä–µ–≤—å—é –ø–µ—Ä–µ–≤–æ–¥–∞.
        </p>

        <VideoPreview
          videoPreviewUrl={videoPreviewUrl}
          isPlaying={isPlaying}
          togglePlayback={togglePlayback}
          selectedLanguage={selectedLanguage}
          allLanguages={allLanguages}
        />

        <InfoMessage />
      </div>
    </div>
  );
};

export default SelectLanguageStep;
